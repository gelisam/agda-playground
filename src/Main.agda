module Main where

open import Data.List using (List; []; _∷_; _++_; [_])
open import Data.Nat using (ℕ; zero; suc)


--------------------
-- Standard stuff --
--------------------

_$_ : {A B : Set} → (A → B) → A → B
_$_ f x = f x
infixr -1 _$_

data Elem {A : Set} : A → List A → Set where
  Here : ∀ {x xs} → Elem x (x ∷ xs)
  There : ∀ {x y xs} → Elem x xs → Elem x (y ∷ xs)


-----------
-- Types --
-----------

-- Types for the phase 0 code, including user-written code and code generated by
-- the macros.
data Ty : Set where
  NatTy : Ty
  _:->:_ : Ty → Ty → Ty

-- Types for the implementation of a macro. In this simplified setting, macro
-- definitions cannot themselves contain macro calls.
data MacroTy : Set where
  NatTy : MacroTy
  _:->:_ : MacroTy → MacroTy → MacroTy
  DiaTy : Ty → MacroTy

infixr 4 _:->:_


-----------
-- Terms --
-----------

mutual
  -- * mu contains the phase 1 macro definitions.
  -- * gamma contains the phase 0 variables.
  data Term (mu : List MacroTy) (gamma : List Ty) : Ty → Set where
    Var
      : ∀ {ty}
      → Elem ty gamma
      → Term mu gamma ty
    Zero
      : Term mu gamma NatTy
    Succ
      : Term mu gamma NatTy
      → Term mu gamma NatTy
    FoldNat
      : ∀ {ty}
      → Term mu gamma ty
      → Term mu gamma (ty :->: ty)
      → Term mu gamma NatTy
      → Term mu gamma ty
    App
      : ∀ {ty1 ty2}
      → Term mu gamma (ty1 :->: ty2)
      → Term mu gamma ty1
      → Term mu gamma ty2
    Lam
      : ∀ {ty1 ty2}
      → Term mu (gamma ++ [ ty1 ]) ty2
      → Term mu gamma (ty1 :->: ty2)
    Let
      : ∀ {ty1 ty2}
      → Term mu gamma ty1
      → Term mu (gamma ++ [ ty1 ]) ty2
      → Term mu gamma ty2
    LetMacro
      : ∀ {ty1 ty2}
      → MacroTerm mu gamma ty1
      → Term (mu ++ [ ty1 ]) gamma ty2
      → Term mu gamma ty2
    MacroCall
      : ∀ {ty}
      → MacroTerm mu gamma (DiaTy ty)
      → Term mu gamma ty

  data MacroTerm (mu : List MacroTy) (gamma : List Ty) : MacroTy → Set where
    Var
      : ∀ {ty}
      → Elem ty mu
      → MacroTerm mu gamma ty
    Zero
      : MacroTerm mu gamma NatTy
    Succ
      : MacroTerm mu gamma NatTy
      → MacroTerm mu gamma NatTy
    FoldNat
      : ∀ {ty}
      → MacroTerm mu gamma ty
      → MacroTerm mu gamma (ty :->: ty)
      → MacroTerm mu gamma NatTy
      → MacroTerm mu gamma ty
    App
      : ∀ {ty1 ty2}
      → MacroTerm mu gamma (ty1 :->: ty2)
      → MacroTerm mu gamma ty1
      → MacroTerm mu gamma ty2
    Lam
      : ∀ {ty1 ty2}
      → MacroTerm (mu ++ [ ty1 ]) gamma ty2
      → MacroTerm mu gamma (ty1 :->: ty2)
    Let
      : ∀ {ty1 ty2}
      → MacroTerm mu gamma ty1
      → MacroTerm (mu ++ [ ty1 ]) gamma ty2
      → MacroTerm mu gamma ty2
    Quote
      : ∀ {ty}
      → Term mu gamma ty
      → MacroTerm mu gamma (DiaTy ty)
    LetQuote
      : ∀ {ty1 ty2}
      → MacroTerm mu gamma (DiaTy ty1)
      → MacroTerm mu (gamma ++ [ ty1 ]) ty2
      → MacroTerm mu gamma ty2


---------------
-- Weakening --
---------------

module _ {A : Set} where
  data _⊆_ : List A → List A → Set where
    []
      : [] ⊆ []
    yes∷_
      : ∀ {x xs xys}
      → xs ⊆ xys
      → x ∷ xs ⊆ x ∷ xys
    no∷_
      : ∀ {y xs xys}
      → xs ⊆ xys
      → xs ⊆ y ∷ xys
  infix 4 _⊆_

  emptySubset
    : ∀ {xys : List A}
    → [] ⊆ xys
  emptySubset {[]}
    = []
  emptySubset {_ ∷ xys}
    = no∷ (emptySubset {xys})

  fullSubset
    : ∀ {xs : List A}
    → xs ⊆ xs
  fullSubset {[]}
    = []
  fullSubset {_ ∷ xs}
    = yes∷ (fullSubset {xs})

  _++[yes]
    : ∀ {x : A} {xs xys}
    → xs ⊆ xys
    → (xs ++ [ x ]) ⊆ (xys ++ [ x ])
  [] ++[yes]
    = yes∷ []
  (yes∷ subset) ++[yes]
    = yes∷ (subset ++[yes])
  (no∷ subset) ++[yes]
    = no∷ (subset ++[yes])

  _++[no]
    : ∀ {x : A} {xs xys}
    → xs ⊆ xys
    → xs ⊆ (xys ++ [ x ])
  [] ++[no]
    = no∷ []
  (yes∷ subset) ++[no]
    = yes∷ (subset ++[no])
  (no∷ subset) ++[no]
    = no∷ (subset ++[no])

  weakenElem
    : ∀ {x : A} {xs xys}
    → xs ⊆ xys
    → Elem x xs
    → Elem x xys
  weakenElem (yes∷_ _) Here
    = Here
  weakenElem (yes∷ xs) (There i)
    = There (weakenElem xs i)
  weakenElem (no∷ xs) i
    = There (weakenElem xs i)

mutual
  weakenTerm
    : ∀ {mu mu' gamma gamma' ty}
    → mu ⊆ mu'
    → gamma ⊆ gamma'
    → Term mu gamma ty
    → Term mu' gamma' ty
  weakenTerm _ gammaSubset (Var i)
    = Var (weakenElem gammaSubset i)
  weakenTerm _ _ Zero
    = Zero
  weakenTerm muSubset gammaSubset (Succ e)
    = Succ (weakenTerm muSubset gammaSubset e)
  weakenTerm muSubset gammaSubset (FoldNat ez es en)
    = FoldNat
        (weakenTerm muSubset gammaSubset ez)
        (weakenTerm muSubset gammaSubset es)
        (weakenTerm muSubset gammaSubset en)
  weakenTerm muSubset gammaSubset (App ef e1)
    = App
        (weakenTerm muSubset gammaSubset ef)
        (weakenTerm muSubset gammaSubset e1)
  weakenTerm muSubset gammaSubset (Lam e)
    = Lam (weakenTerm muSubset (gammaSubset ++[yes]) e)
  weakenTerm muSubset gammaSubset (Let e1 e2)
    = Let
        (weakenTerm muSubset gammaSubset e1)
        (weakenTerm muSubset (gammaSubset ++[yes]) e2)
  weakenTerm muSubset gammaSubset (LetMacro e1 e2)
    = LetMacro
        (weakenMacroTerm muSubset gammaSubset e1)
        (weakenTerm (muSubset ++[yes]) gammaSubset e2)
  weakenTerm muSubset gammaSubset (MacroCall e)
    = MacroCall (weakenMacroTerm muSubset gammaSubset e)

  weakenMacroTerm
    : ∀ {mu mu' gamma gamma' ty}
    → mu ⊆ mu'
    → gamma ⊆ gamma'
    → MacroTerm mu gamma ty
    → MacroTerm mu' gamma' ty
  weakenMacroTerm muSubset _ (Var i)
    = Var (weakenElem muSubset i)
  weakenMacroTerm _ _ Zero
    = Zero
  weakenMacroTerm muSubset gammaSubset (Succ e)
    = Succ (weakenMacroTerm muSubset gammaSubset e)
  weakenMacroTerm muSubset gammaSubset (FoldNat ez es en)
    = FoldNat
        (weakenMacroTerm muSubset gammaSubset ez)
        (weakenMacroTerm muSubset gammaSubset es)
        (weakenMacroTerm muSubset gammaSubset en)
  weakenMacroTerm muSubset gammaSubset (App ef e1)
    = App
        (weakenMacroTerm muSubset gammaSubset ef)
        (weakenMacroTerm muSubset gammaSubset e1)
  weakenMacroTerm muSubset gammaSubset (Lam e)
    = Lam (weakenMacroTerm (muSubset ++[yes]) gammaSubset e)
  weakenMacroTerm muSubset gammaSubset (Let e1 e2)
    = Let
        (weakenMacroTerm muSubset gammaSubset e1)
        (weakenMacroTerm (muSubset ++[yes]) gammaSubset e2)
  weakenMacroTerm muSubset gammaSubset (Quote e)
    = Quote (weakenTerm muSubset gammaSubset e)
  weakenMacroTerm muSubset gammaSubset (LetQuote e1 e2)
    = LetQuote
        (weakenMacroTerm muSubset gammaSubset e1)
        (weakenMacroTerm muSubset (gammaSubset ++[yes]) e2)

closedTerm
  : ∀ {mu gamma ty}
  → Term [] [] ty
  → Term mu gamma ty
closedTerm
  = weakenTerm emptySubset emptySubset

closedMacroTerm
  : ∀ {mu gamma ty}
  → MacroTerm [] [] ty
  → MacroTerm mu gamma ty
closedMacroTerm
  = weakenMacroTerm emptySubset emptySubset


--------------
-- Examples --
--------------

natLit
  : ∀ {mu gamma}
  → ℕ
  → Term mu gamma NatTy
natLit zero
  = Zero
natLit (suc n)
  = Succ (natLit n)

macroNatLit
  : ∀ {mu gamma}
  → ℕ
  → MacroTerm mu gamma NatTy
macroNatLit zero
  = Zero
macroNatLit (suc n)
  = Succ (macroNatLit n)

add
  : ∀ {mu gamma}
  → Term mu gamma (NatTy :->: NatTy :->: NatTy)
add
  = closedTerm
  $ Lam {-x-}
  $ Lam {-y-}
  $ FoldNat
      (Var {-y-} (There Here))
      ( Lam {- x-1 + y -}
      $ Succ (Var {- x-1 + y -} (There (There Here)))
      )
      (Var {-x-} Here)

macroAdd
  : ∀ {mu gamma}
  → MacroTerm mu gamma (NatTy :->: NatTy :->: NatTy)
macroAdd
  = closedMacroTerm
  $ Lam {-x-}
  $ Lam {-y-}
  $ FoldNat
      (Var {-y-} (There Here))
      ( Lam {- x-1 + y -}
      $ Succ (Var {- x-1 + y -} (There (There Here)))
      )
      (Var {-x-} Here)

times
  : ∀ {mu gamma}
  → Term mu gamma (NatTy :->: NatTy :->: NatTy)
times
  = closedTerm
  $ Lam {-x-}
  $ Lam {-y-}
  $ FoldNat
      Zero
      ( Lam {- (x-1) * y -}
      $ App
          (App
            add
            (Var {- (x-1) * y -} (There (There Here))))
          (Var {-y-} (There Here))
      )
      (Var {-x-} Here)

macroTimes
  : ∀ {mu gamma}
  → MacroTerm mu gamma (NatTy :->: NatTy :->: NatTy)
macroTimes
  = closedMacroTerm
  $ Lam {-x-}
  $ Lam {-y-}
  $ FoldNat
      Zero
      ( Lam {- (x-1) * y -}
      $ App
          (App
            macroAdd
            (Var {- (x-1) * y -} (There (There Here))))
          (Var {-y-} (There Here))
      )
      (Var {-x-} Here)

power : MacroTerm [] [] (NatTy :->: DiaTy NatTy :->: DiaTy NatTy)
power
  = Lam {-n-}
  $ Lam {-diaX-}
  $ LetQuote {-x-} (Var {-diaX-} (There Here))
  $ FoldNat
      (Quote (natLit 1))
      ( Lam {- power (n-1) diaX -}
      $ LetQuote {- power (n-1) x -} (Var {- power (n-1) diaX -} (There (There Here)))
      $ Quote
      $ App
          (App
            times
            (Var {- power (n-1) x -} (There Here)))
          (Var {-x-} Here)
      )
      (Var {-n-} Here)

square : Term [] [] (NatTy :->: NatTy)
square
  = LetMacro {-power-} power
  $ Lam {-x-}
  $ MacroCall
  $ App
      (App
        (Var {-power-} Here)
        (macroNatLit 2))
      (Quote (Var {-x-} Here))


-----------------------------
-- Values and environments --
-----------------------------

mutual
  data Value : Ty → Set where
    nat
      : ℕ
      → Value NatTy
    closure
      : ∀ {gamma ty1 ty2}
      → Env gamma
      → Term [] (gamma ++ [ ty1 ]) ty2
      → Value (ty1 :->: ty2)

  data Env : List Ty → Set where
    []
      : Env []
    _∷_
      : ∀ {ty gamma}
      → Value ty
      → Env gamma
      → Env (ty ∷ gamma)

mutual
  data MacroValue (gamma : List Ty) : MacroTy → Set where
    nat
      : ℕ
      → MacroValue gamma NatTy
    closure
      : ∀ {mu ty1 ty2}
      → MacroEnv mu gamma
      → MacroTerm (mu ++ [ ty1 ]) gamma ty2
      → MacroValue gamma (ty1 :->: ty2)
    quotedTerm
      : ∀ {ty}
      → Term [] gamma ty
      → MacroValue gamma (DiaTy ty)

  data MacroEnv : List MacroTy → List Ty → Set where
    []
      : ∀ {gamma}
      → MacroEnv [] gamma
    _∷_
      : ∀ {mu gamma ty}
      → MacroValue gamma ty
      → MacroEnv mu gamma
      → MacroEnv (ty ∷ mu) gamma


--------------------------------------
-- Value and environment operations --
--------------------------------------

lookup
  : ∀ {ty gamma}
  → Elem ty gamma
  → Env gamma
  → Value ty
lookup Here (v ∷ _)
  = v
lookup (There i) (_ ∷ vs)
  = lookup i vs

lookupMacro
  : ∀ {ty mu gamma}
  → Elem ty mu
  → MacroEnv mu gamma
  → MacroValue gamma ty
lookupMacro Here (v ∷ _)
  = v
lookupMacro (There i) (_ ∷ vs)
  = lookupMacro i vs

snocEnv
  : ∀ {gamma ty}
  → Env gamma
  → Value ty
  → Env (gamma ++ [ ty ])
snocEnv [] v
  = v ∷ []
snocEnv (v₀ ∷ vs) v
  = v₀ ∷ snocEnv vs v

snocMacroEnv
  : ∀ {mu gamma ty}
  → MacroEnv mu gamma
  → MacroValue gamma ty
  → MacroEnv (mu ++ [ ty ]) gamma
snocMacroEnv [] v
  = v ∷ []
snocMacroEnv (v₀ ∷ vs) v
  = v₀ ∷ snocMacroEnv vs v

mutual
  weakenMacroValue
    : ∀ {gamma gamma' ty}
    → gamma ⊆ gamma'
    → MacroValue gamma ty
    → MacroValue gamma' ty
  weakenMacroValue _ (nat n)
    = nat n
  weakenMacroValue subset (closure env e)
    = closure
        (weakenMacroEnv subset env)
        (weakenMacroTerm fullSubset subset e)
  weakenMacroValue subset (quotedTerm e)
    = quotedTerm (weakenTerm fullSubset subset e)

  weakenMacroEnv
    : ∀ {mu gamma gamma'}
    → gamma ⊆ gamma'
    → MacroEnv mu gamma
    → MacroEnv mu gamma'
  weakenMacroEnv _ []
    = []
  weakenMacroEnv subset (v ∷ vs)
    = weakenMacroValue subset v
    ∷ weakenMacroEnv subset vs


---------------------
-- Macro expansion --
---------------------

foldℕ : ∀ {A : Set} → A → (A → A) → ℕ → A
foldℕ z _ zero
  = z
foldℕ z s (suc n)
  = s (foldℕ z s n)

-- TODO: does foldNatMacro terminate?
{-# NON_TERMINATING #-}
mutual
  expand
    : ∀ {mu gamma ty}
    → MacroEnv mu gamma
    → Term mu gamma ty
    → Term [] gamma ty
  expand _ (Var i)
    = Var i
  expand _ Zero
    = Zero
  expand env (Succ e)
    = Succ (expand env e)
  expand env (FoldNat ez es en)
    = FoldNat
        (expand env ez)
        (expand env es)
        (expand env en)
  expand env (App ef e1)
    = App
        (expand env ef)
        (expand env e1)
  expand {mu} {gamma} env (Lam {ty1} e)
    = Lam (expand env' e)
    where
      env' : MacroEnv mu (gamma ++ [ ty1 ])
      env' = weakenMacroEnv (fullSubset ++[no]) env
  expand {mu} {gamma} env (Let {ty1} e1 e2)
    = Let
        (expand env e1)
        (expand env' e2)
    where
      env' : MacroEnv mu (gamma ++ [ ty1 ])
      env' = weakenMacroEnv (fullSubset ++[no]) env
  expand {mu} {gamma} env (LetMacro {ty1} e1 e2)
    = expand env' e2
    where
      v1 : MacroValue gamma ty1
      v1 = evalMacroTerm env e1

      env' : MacroEnv (mu ++ [ ty1 ]) gamma
      env' = snocMacroEnv env v1
  expand env (MacroCall e) with evalMacroTerm env e
  ... | quotedTerm e'
    = e'

  evalMacroTerm
    : ∀ {mu gamma ty}
    → MacroEnv mu gamma
    → MacroTerm mu gamma ty
    → MacroValue gamma ty
  evalMacroTerm env (Var i)
    = lookupMacro i env
  evalMacroTerm _ Zero
    = nat zero
  evalMacroTerm env (Succ e) with evalMacroTerm env e
  ... | nat n
    = nat (suc n)
  evalMacroTerm env (FoldNat ez es en) with evalMacroTerm env ez | evalMacroTerm env es | evalMacroTerm env en
  ... | vz | closure capturedEnv e2 | nat n
    = foldNatMacro vz capturedEnv e2 n
  evalMacroTerm env (App ef e1) with evalMacroTerm env ef | evalMacroTerm env e1
  ... | closure capturedEnv e2 | v1
    = evalMacroTerm (snocMacroEnv capturedEnv v1) e2
  evalMacroTerm env (Lam e)
    = closure env e
  evalMacroTerm env (Let e1 e2) with evalMacroTerm env e1
  ... | v1
    = evalMacroTerm (snocMacroEnv env v1) e2
  evalMacroTerm env (Quote e)
    = quotedTerm (expand env e)
  evalMacroTerm {mu} {gamma} env (LetQuote {ty1} e1 e2) with evalMacroTerm env e1
  ... | quotedTerm e'
    = -- TODO: add a second environment parameter to track
      -- the let-quoted variables.
      _

  foldNatMacro
    : ∀ {mu gamma ty}
    → MacroValue gamma ty
    → MacroEnv mu gamma
    → MacroTerm (mu  ++ [ ty ]) gamma ty
    → ℕ
    → MacroValue gamma ty
  foldNatMacro vz _ _ zero
    = vz
  foldNatMacro {mu} {gamma} {ty} vz env e2 (suc n) with foldNatMacro vz env e2 n
  ... | v1
    = evalMacroTerm env' e2
    where
      env' : MacroEnv (mu ++ [ ty ]) gamma
      env' = snocMacroEnv env v1
